{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/apple.js","webpack:///./src/drawing.js","webpack:///./src/game.js","webpack:///./src/script.js","webpack:///./src/snake.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC3DA;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;ACvEA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/script.js\");\n","export default class Apple {\n  constructor(position = [10, 10]) {\n    this.position = position;\n  }\n\n  setNewPosition(widthInBlocks, heightInBlocks) {\n    const newX = Math.round(Math.random() * (widthInBlocks - 1));\n    const newY = Math.round(Math.random() * (heightInBlocks - 1));\n    this.position = [newX, newY];\n  }\n\n  isOnSnake(snakeToCheck) {\n    let isOnSnake = false;\n    snakeToCheck.body.map(block => {\n      if (this.position[0] === block[0] && this.position[1] === block[1]) {\n        isOnSnake = true;\n      }\n    });\n\n    return isOnSnake;\n  }\n}\n","export default class Drawing {\n  static gameOver(ctx, centreX, centreY) {\n    ctx.save();\n    ctx.font = \"bold 70px sans-serif\";\n    ctx.fillStyle = \"#000\";\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    ctx.strokeStyle = \"white\";\n    ctx.lineWidth = 5;\n    ctx.strokeText(\"Game Over\", centreX, centreY - 180);\n    ctx.fillText(\"Game Over\", centreX, centreY - 180);\n    ctx.font = \"bold 30px sans-serif\";\n    ctx.strokeText(\n      \"Appuyer sur la touche Espace pour rejouer\",\n      centreX,\n      centreY - 120\n    );\n    ctx.fillText(\n      \"Appuyer sur la touche Espace pour rejouer\",\n      centreX,\n      centreY - 120\n    );\n    ctx.restore();\n  }\n\n  static drawScore(ctx, centreX, centreY, score) {\n    ctx.save();\n    ctx.font = \"bold 200px sans-serif\";\n    ctx.fillStyle = \"gray\";\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    ctx.fillText(score.toString(), centreX, centreY);\n    ctx.restore();\n  }\n\n  static drawSnake(ctx, blockSize, snake) {\n    ctx.save();\n    ctx.fillStyle = \"#ff0000\";\n    snake.body.map(block => this.drawBlock(ctx, block, blockSize));\n\n    ctx.restore();\n  }\n\n  static drawApple(ctx, blockSize, apple) {\n    const radius = blockSize / 2;\n    const x = apple.position[0] * blockSize + radius;\n    const y = apple.position[1] * blockSize + radius;\n    ctx.save();\n    ctx.fillStyle = \"#33cc33\";\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, Math.PI * 2, true);\n    ctx.fill();\n    ctx.restore();\n  }\n\n  static drawBlock(ctx, position, blockSize) {\n    const [x, y] = position;\n    ctx.fillRect(x * blockSize, y * blockSize, blockSize, blockSize);\n  }\n}\n","/* global  document */\nimport Snake from \"./snake\";\nimport Apple from \"./apple\";\nimport Drawing from \"./drawing\";\n\nexport default class Game {\n  constructor(canvasWidth = 900, canvasHeight = 600) {\n    this.canvasWidth = canvasWidth;\n    this.canvasHeight = canvasHeight;\n    this.blockSize = 30;\n    this.canvas = document.createElement(\"canvas\");\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.widthInBlocks = this.canvasWidth / this.blockSize;\n    this.heightInBlocks = this.canvasHeight / this.blockSize;\n    this.centreX = this.canvasWidth / 2;\n    this.centreY = this.canvasHeight / 2;\n    this.delay = 100;\n    this.snakee = null;\n    this.applee = null;\n    this.score = null;\n    this.timeOut = null;\n  }\n\n  init() {\n    this.canvas.width = this.canvasWidth;\n    this.canvas.height = this.canvasHeight;\n    this.canvas.style.border = \"30px solid gray\";\n    this.canvas.style.margin = \"50px auto\";\n    this.canvas.style.display = \"block\";\n    this.canvas.style.backgroundColor = \"#ddd\";\n    document.body.appendChild(this.canvas);\n    this.launch();\n  }\n\n  launch() {\n    this.snakee = new Snake(\"right\", [6, 4], [5, 4], [4, 4], [3, 4], [2, 4]);\n    this.applee = new Apple();\n    this.score = 0;\n    clearTimeout(this.timeOut);\n    this.delay = 100;\n    this.refreshCanvas();\n  }\n\n  refreshCanvas() {\n    this.snakee.advance();\n    if (this.snakee.checkCollision(this.widthInBlocks, this.heightInBlocks)) {\n      Drawing.gameOver(this.ctx, this.centreX, this.centreY);\n    } else {\n      if (this.snakee.isEatingApple(this.applee)) {\n        this.score += 1;\n        this.snakee.ateApple = true;\n\n        do {\n          this.applee.setNewPosition(this.widthInBlocks, this.heightInBlocks);\n        } while (this.applee.isOnSnake(this.snakee));\n\n        if (this.score % 5 === 0) {\n          this.speedUp();\n        }\n      }\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n      Drawing.drawScore(this.ctx, this.centreX, this.centreY, this.score);\n      Drawing.drawSnake(this.ctx, this.blockSize, this.snakee);\n      Drawing.drawApple(this.ctx, this.blockSize, this.applee);\n      this.timeOut = setTimeout(this.refreshCanvas.bind(this), this.delay);\n    }\n  }\n\n  speedUp() {\n    this.delay /= 2;\n  }\n}\n","/* global window document */\nimport Game from \"./game\";\n\nwindow.onload = () => {\n  document.onkeydown = e => {\n    const key = e.keyCode;\n    let newDirection;\n    switch (key) {\n      case 37:\n        newDirection = \"left\";\n        break;\n      case 38:\n        newDirection = \"up\";\n        break;\n      case 39:\n        newDirection = \"right\";\n        break;\n      case 40:\n        newDirection = \"down\";\n        break;\n      case 32:\n        myGame.launch();\n        return;\n      default:\n        return;\n    }\n    myGame.snakee.setDirection(newDirection);\n  };\n\n  let myGame = new Game();\n  myGame.init();\n};\n","export default class Snake {\n  constructor(direction, ...body) {\n    this.body = body;\n    this.direction = direction;\n    this.ateApple = false;\n  }\n\n  advance() {\n    const nextPosition = this.body[0].slice();\n    switch (this.direction) {\n      case \"left\":\n        nextPosition[0] -= 1;\n        break;\n      case \"right\":\n        nextPosition[0] += 1;\n        break;\n      case \"down\":\n        nextPosition[1] += 1;\n        break;\n      case \"up\":\n        nextPosition[1] -= 1;\n        break;\n      default:\n        throw new Error(\"invalid direction\");\n    }\n    this.body.unshift(nextPosition);\n    if (!this.ateApple) this.body.pop();\n    else this.ateApple = false;\n  }\n\n  setDirection(newDirection) {\n    let allowedDirections;\n    switch (this.direction) {\n      case \"left\":\n      case \"right\":\n        allowedDirections = [\"up\", \"down\"];\n        break;\n      case \"down\":\n      case \"up\":\n        allowedDirections = [\"left\", \"right\"];\n        break;\n      default:\n        throw new Error(\"invalid direction\");\n    }\n    if (allowedDirections.includes(newDirection)) {\n      this.direction = newDirection;\n    }\n  }\n\n  checkCollision(widthInBlocks, heightInBlocks) {\n    let wallCollision = false;\n    let snakeCollision = false;\n    const [head, ...rest] = this.body;\n    const [snakeX, snakeY] = head;\n    const minX = 0;\n    const minY = 0;\n    const maxX = widthInBlocks - 1;\n    const maxY = heightInBlocks - 1;\n    const isNotBetweenHorizontalWalls = snakeX < minX || snakeX > maxX;\n    const isNotBetweenVerticalWalls = snakeY < minY || snakeY > maxY;\n\n    if (isNotBetweenHorizontalWalls || isNotBetweenVerticalWalls)\n      wallCollision = true;\n\n    rest.map(block => {\n      if (snakeX === block[0] && snakeY === block[1]) snakeCollision = true;\n    });\n    return wallCollision || snakeCollision;\n  }\n\n  isEatingApple(appleToEat) {\n    const head = this.body[0];\n    if (\n      head[0] === appleToEat.position[0] &&\n      head[1] === appleToEat.position[1]\n    )\n      return true;\n    else return false;\n  }\n}\n"],"sourceRoot":""}